"""

testcodespeed.py

this script tests the speed of decode statement and pythons ability to loop around large files
The song "The Twelve Days of Christmas" has been replicated 90 times to create an input
file of approximately 10,250 line.

Peter Koppelman July 11, 2017
"""

import sys
import time
import urllib.request

# read the url 
url = "https://raw.githubusercontent.com/PeterKoppelman/Python-INFO1-CE9990/master/christmastest"

# check to make sure that we can open the url
try:
    christmasSong = urllib.request.urlopen(url) # we were successful
except urllib.error.URLError as error: 
    print("Error {} occurred.".format(error), sep = "") # we weren't successful
    sys.exit(1)

# read the filename
# You can multiply the file by a number to increase it's size.
# lines = filename.readlines() * 5
lines = christmasSong.readlines()
count = sum(1 for line in lines)
# Close christmasSong
christmasSong.close()

start = time.process_time()

# use decode to onverts a sequence of bytes into a string of characters.
lines = [line.decode("utf-8") for line in lines]
    
end = time.process_time()
print("Number of lines in file is {:,.0f}".format(count))
print("Elapsed time for initial deocde statement is {:.4f} seconds".format(end - start))

# now let's sort lines
lines.sort()

# create a list with only one instance of each item in the original list. This is a 2 dimensional list.
uniqueline = []
start = time.process_time()
for line in lines:
    # strip out the newline that appears and replace is with '' (no space).
    # If we don't do this the print statement doesn't work properly.
    name = line.strip()
    # don't put the blank line between paragraphs in the song in uniqueline.
    if name != "":
        # count the number of times that the line appears in the song
        i = lines.count(line)
        # check to see if the combination of the line in the song and the number of times it has appeared is in uniqueline.
        if [name, i] not in uniqueline: 
            uniqueline.append([name, i])
            
end = time.process_time()
print("Elapsed time to create a unique file to print out is {:.4f} seconds".format(end - start))

print("\n\nA list of unique phrases and the amount of times they appear in the song (sorted by phrase):")
for line in uniqueline:
     # Improved formating for numbers over 999.
     print("\t","{} appears {:,.0f} times".format(line[0], line[1]))
     
uniqueline.sort(key = lambda line:line[1], reverse = True)
print("\n\nA list of unique phrases sorted by the number of times that they appear in the song:")
for line in uniqueline:
     print("\t","{} appears {:,.0f} times".format(line[0], line[1]))

sys.exit(0)
